#!/usr/bin/env swift

// https://github.com/davidfmiller/bin

import Foundation
import Cocoa
import Darwin

let stderr = FileHandle.standardError
let stdout = FileHandle.standardOutput

let PATH = NSString(string: "~/.pushover.plist").expandingTildeInPath

let ARGUMENTS = Array(CommandLine.arguments[1 ..< CommandLine.arguments.count])

let config : NSDictionary? = NSDictionary(contentsOfFile:PATH)

if config == nil {
  let template = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
    "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n" +
    "<plist version=\"1.0\">\n" +
    "  <dict>\n" +
    "    <key>user</key>\n" +
    "     <string>{userToken}</string>\n" +
    "     <key>applications</key>\n" +
    "     <dict>\n" +
    "       <key>{applicationName}</key>\n" +
    "       <string>{applicationToken}</string>\n" +
    "       <!-- add more applications... -->" +
    "    </dict>\n" +
    "  </dict>\n" +
    "</plist>\n"

  do {
    try template.write(toFile:PATH, atomically: false, encoding: String.Encoding.utf8)
  }
  catch let error as NSError {
    stderr.write("ðŸš« \(error)".data(using: String.Encoding.utf8)!)
    exit(0)
  }

  stderr.write("ðŸš«  file `\(PATH)` doesn't exist; a template has been created \n".data(using: String.Encoding.utf8)!)
  exit(0);
}

if ARGUMENTS.count < 2 {
  stderr.write("ðŸš«  Usage: > pushover {application} {message}\n".data(using: String.Encoding.utf8)!)
  exit(0)
}

let APP = ARGUMENTS[0]
let MESSAGE = ARGUMENTS[1]

if (config!.object(forKey:"user") == nil) {
  stderr.write("ðŸš«  `user` identifier does not exist in \(PATH)\n".data(using: String.Encoding.utf8)!)
  exit(0)
}

if (config!.object(forKey:"applications") == nil) {
  stderr.write("ðŸš«  `applications` dictionary does not exist in \(PATH)\n".data(using: String.Encoding.utf8)!)
  exit(0)
}

let apps : NSDictionary = config!.object(forKey:"applications") as! NSDictionary

if (apps.object(forKey:APP) == nil) {
  stderr.write("ðŸš«  application `\(APP)` does not exist in \(PATH)\n".data(using: String.Encoding.utf8)!)
  exit(0)
}

let USER : String = config!.object(forKey:"user") as! String
let APPKEY : NSString = apps.object(forKey: APP) as! NSString
let HOST = "https://api.pushover.net"

let request = NSMutableURLRequest(url: URL(string: "\(HOST)/1/messages.json")!)
request.httpMethod = "POST"
request.httpBody = "token=\(APPKEY)&user=\(USER)&message=\(MESSAGE)".data(using: String.Encoding.utf8);

//do {

let semaphore = DispatchSemaphore(value: 0)

//  let sessionConfiguration = URLSessionConfiguration.default
  let task = URLSession.shared.dataTask(with: request as URLRequest) {(data, response, error) in
    if error != nil {
      stderr.write("ðŸš«  \(error!)\n".data(using: String.Encoding.utf8)!)
      exit(0)
    }
    else {
//      stdout.write("\(response!)".data(using: String.Encoding.utf8)!)
    }
    semaphore.signal()
  }
  task.resume()
  _ = semaphore.wait(timeout: DispatchTime.distantFuture)

/*
  let urlData = try NSURLConnection.sendSynchronousRequest(request as URLRequest, returning: nil)
  try JSONSerialization.jsonObject(with: urlData, options: JSONSerialization.ReadingOptions.mutableContainers)
  */
//}
//catch let error as NSError {

//}
