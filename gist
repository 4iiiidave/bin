#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
gist
Retrieve syntax-aware code listing from a gist's URL, ex: https://gist.github.com/davidfmiller/b29d44c38a49e0b551554a36ae4b7918
https://davidfmiller.github.io/bin/
"""

import sys
import urllib2
import getopt
from HTMLParser import HTMLParser

# create a subclass and override the handler methods
class GistParser(HTMLParser):

    def __init__(self):
      HTMLParser.__init__(self)
      self.state = 'null'
      self.buffer = ''
      self.markup = ''

    def handle_starttag(self, tag, attrs):

        if tag == 'table':
          for key,value in attrs:
            if key == 'class' and 'highlight' in value.split(' '):
              self.state = 'table'
        elif tag == 'td':
          self.buffer = ''
          for key,value in attrs:
            if key == 'class' and 'blob-code' in value.split(' '):
              self.state = 'td'
        elif self.state == 'td':
          for key,value in attrs:
            if key == 'class':
              self.buffer += '<' + tag + ' class="' + value + '">'

    def handle_endtag(self, tag):

      if tag == 'table':
        self.state = 'null'
      elif self.state == 'td' and tag == 'tr':
        self.markup += "\n"

      elif tag == 'td':
        if self.state == 'td':
          self.markup += self.buffer
          self.state == 'table'
        self.buffer = ''

      elif self.state == 'td':
        self.buffer += '</' + tag + '>'

    def handle_data(self, data):
      if self.state == 'td':
        self.buffer += data


try:
  opts, args = getopt.getopt(sys.argv[1:], '', [])
except getopt.GetoptError:
  raise SystemExit('ðŸš«  Usage: gist [url]')

if len(args) == 0:
  sys.stderr.write("ðŸš«  Usage: gist [url]\n")

for arg in args:

  content = urllib2.urlopen(arg).read()

  if content:

    # instantiate the parser and fed it some HTML
    parser = GistParser()
    parser.feed(content)

    print parser.markup.strip()

  else:
    sys.stderr.write("ðŸš«  " + arg + " doesn't exist\n")
